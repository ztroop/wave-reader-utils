{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wave Reader Utilities The Airthings Wave is a series of devices that track Radon levels in the home. Radon is a radioactive gas that comes from the breakdown of uranium in soil and rock. It's invisible, odourless and tasteless. This is an unofficial Airthings Wave community library designed to provide utilities for device and web communication. The library wouldn't be possible without the existing efforts from Airthings and the community. See documentation for more information. Features Using bleak as a dependency for platform cross-compatibility and support for asynchronous operation. Support for major models: Wave+, Wave, Wave (Version 2) and Wave Mini devices. Code testing, coverage reporting, linting, type hinting, and formatting. Provide a more comprehensive programming interface for a developer audience. Requirements In Ubuntu/Debian, make sure you have libglib2.0-dev and bluez installed: sudo apt-get install libglib2.0-dev bluez -y Other Linux distributions should have equivalent packages. In theory, other platforms (Windows, Mac) are supported by using bleak as a dependency, but open a ticket if you run into any issues. Installation You can install the library by running: pip install wave-reader Example Usage There are various concrete examples available in the examples directory. That includes CLI interaction and other interesting scenarios that demonstrate API usage. import asyncio from wave_reader import wave if __name__ == \"__main__\": # Scan for BTLE Wave devices. devices = wave.scan() # Event loop to run asynchronous tasks. loop = asyncio.get_event_loop() # Get sensor readings from available wave devices. for d in devices: sensor_readings = loop.run_until_complete(d.get_sensor_values()) print(sensor_readings) # >>> DeviceSensors (humidity: 32.5, radon_sta: 116, radon_lta: 113 ... Web API Client Module The wave_reader/web module in this library provides a client for the Airthings web API. See this page for more details. Contribution If you identify a bug, please open a ticket. Pull requests are always welcome. Testing You can run the entire test suite by running tox . It will run flake8 , isort and pytest . If you'd like to just run unit tests, running pytest ./tests is sufficient.","title":"Introduction"},{"location":"#wave-reader-utilities","text":"The Airthings Wave is a series of devices that track Radon levels in the home. Radon is a radioactive gas that comes from the breakdown of uranium in soil and rock. It's invisible, odourless and tasteless. This is an unofficial Airthings Wave community library designed to provide utilities for device and web communication. The library wouldn't be possible without the existing efforts from Airthings and the community. See documentation for more information.","title":"Wave Reader Utilities"},{"location":"#features","text":"Using bleak as a dependency for platform cross-compatibility and support for asynchronous operation. Support for major models: Wave+, Wave, Wave (Version 2) and Wave Mini devices. Code testing, coverage reporting, linting, type hinting, and formatting. Provide a more comprehensive programming interface for a developer audience.","title":"Features"},{"location":"#requirements","text":"In Ubuntu/Debian, make sure you have libglib2.0-dev and bluez installed: sudo apt-get install libglib2.0-dev bluez -y Other Linux distributions should have equivalent packages. In theory, other platforms (Windows, Mac) are supported by using bleak as a dependency, but open a ticket if you run into any issues.","title":"Requirements"},{"location":"#installation","text":"You can install the library by running: pip install wave-reader","title":"Installation"},{"location":"#example-usage","text":"There are various concrete examples available in the examples directory. That includes CLI interaction and other interesting scenarios that demonstrate API usage. import asyncio from wave_reader import wave if __name__ == \"__main__\": # Scan for BTLE Wave devices. devices = wave.scan() # Event loop to run asynchronous tasks. loop = asyncio.get_event_loop() # Get sensor readings from available wave devices. for d in devices: sensor_readings = loop.run_until_complete(d.get_sensor_values()) print(sensor_readings) # >>> DeviceSensors (humidity: 32.5, radon_sta: 116, radon_lta: 113 ...","title":"Example Usage"},{"location":"#web-api-client-module","text":"The wave_reader/web module in this library provides a client for the Airthings web API. See this page for more details.","title":"Web API Client Module"},{"location":"#contribution","text":"If you identify a bug, please open a ticket. Pull requests are always welcome.","title":"Contribution"},{"location":"#testing","text":"You can run the entire test suite by running tox . It will run flake8 , isort and pytest . If you'd like to just run unit tests, running pytest ./tests is sufficient.","title":"Testing"},{"location":"api/","text":"API Documentation DeviceSensors Objects @dataclass class DeviceSensors() A dataclass to encapsulate sensor data. Arguments : humidity : Relative humidity level (%rH) radon_sta : Short-term average for radon level (Bq/m3) radon_lta : Long-term average for radon level (Bq/m3) temperature : Ambient temperature (\u00b0C) pressure : Atmospheric pressure (hPa) co2 : Carbon dioxide level (ppm) voc : Volatile organic compound level (ppb) pm : Particulate matter (ug/m3) as_dict | as_dict() -> Dict[str, Union[int, float]] Returns a dictionary of populated dataclass fields. as_tuple | as_tuple() -> tuple Return a tuple of all dataclass fields. dew_point | @property | dew_point() -> Optional[float] Dew point approximation using the Magnus formula. (\u00b0C) from_bytes | @classmethod | from_bytes(cls, data: List[int], product: WaveProduct) Instantiate the class with raw sensor values and the WaveProduct selection. Each product can have different sensors or may require the raw data to be handled differently. WaveDevice Objects class WaveDevice() An object that represents a Airthings Wave device. The discover_devices returns a list of BLEDevice objects that are used in the first parameter. If you want to instantiate a WaveDevice manually without using discovery, you can create a generic object with the following properties: name , address and optionally rssi , metadata . Arguments : device : Device information from Bleak's discover function serial : Parsed serial number from manufacturer data connect | async connect() -> bool Method for initiating BLE connection. is_connected | @requires_client | async is_connected() -> bool Method for determining the status of the BLE connection. disconnect | @requires_client | async disconnect() -> bool Method for closing BLE connection. read_gatt_descriptor | @requires_client | async read_gatt_descriptor(gatt_desc: str) -> Optional[bytearray] Read Generic Attribute Profile GATT descriptor data. Arguments : handle : Specify a descriptor UUID string read_gatt_characteristic | @requires_client | async read_gatt_characteristic(gatt_char: str) -> bytearray Read Generic Attribute Profile GATT characteristic data. Arguments : gatt_char : Specify a characteristic UUID string get_services | @requires_client | async get_services() -> Dict Get available services, descriptors and characteristics for the device. get_sensor_values | @requires_client | async get_sensor_values() -> Optional[DeviceSensors] Get sensor values from the specified Wave device. parse_manufacturer_data | @staticmethod | parse_manufacturer_data(manufacturer_data: Dict[int, int]) -> Optional[str] Converts manufacturer data and returns a serial number for the Airthings Wave devices. Arguments : manufacturer_data : The device manufacturer data create | @classmethod | create(cls, address: str, serial: str) Create a WaveDevice instance with arguments. Arguments : address : The device UUID in MacOS, or MAC in Linux and Windows. serial : The serial number for the device. discover_devices async discover_devices(wave_devices: Optional[List[WaveDevice]] = None) -> List[WaveDevice] Discovers all valid, accessible Airthings Wave devices. scan scan(max_retries: int = 3) -> List[WaveDevice] Convenience function for discovering devices. This is particularly useful for users that are not as comfortable asynchronous programming. Arguments : max_retries : Number of attempts for connecting to devices","title":"API Documentation"},{"location":"api/#api-documentation","text":"","title":"API Documentation"},{"location":"api/#devicesensors-objects","text":"@dataclass class DeviceSensors() A dataclass to encapsulate sensor data. Arguments : humidity : Relative humidity level (%rH) radon_sta : Short-term average for radon level (Bq/m3) radon_lta : Long-term average for radon level (Bq/m3) temperature : Ambient temperature (\u00b0C) pressure : Atmospheric pressure (hPa) co2 : Carbon dioxide level (ppm) voc : Volatile organic compound level (ppb) pm : Particulate matter (ug/m3)","title":"DeviceSensors Objects"},{"location":"api/#as_dict","text":"| as_dict() -> Dict[str, Union[int, float]] Returns a dictionary of populated dataclass fields.","title":"as_dict"},{"location":"api/#as_tuple","text":"| as_tuple() -> tuple Return a tuple of all dataclass fields.","title":"as_tuple"},{"location":"api/#dew_point","text":"| @property | dew_point() -> Optional[float] Dew point approximation using the Magnus formula. (\u00b0C)","title":"dew_point"},{"location":"api/#from_bytes","text":"| @classmethod | from_bytes(cls, data: List[int], product: WaveProduct) Instantiate the class with raw sensor values and the WaveProduct selection. Each product can have different sensors or may require the raw data to be handled differently.","title":"from_bytes"},{"location":"api/#wavedevice-objects","text":"class WaveDevice() An object that represents a Airthings Wave device. The discover_devices returns a list of BLEDevice objects that are used in the first parameter. If you want to instantiate a WaveDevice manually without using discovery, you can create a generic object with the following properties: name , address and optionally rssi , metadata . Arguments : device : Device information from Bleak's discover function serial : Parsed serial number from manufacturer data","title":"WaveDevice Objects"},{"location":"api/#connect","text":"| async connect() -> bool Method for initiating BLE connection.","title":"connect"},{"location":"api/#is_connected","text":"| @requires_client | async is_connected() -> bool Method for determining the status of the BLE connection.","title":"is_connected"},{"location":"api/#disconnect","text":"| @requires_client | async disconnect() -> bool Method for closing BLE connection.","title":"disconnect"},{"location":"api/#read_gatt_descriptor","text":"| @requires_client | async read_gatt_descriptor(gatt_desc: str) -> Optional[bytearray] Read Generic Attribute Profile GATT descriptor data. Arguments : handle : Specify a descriptor UUID string","title":"read_gatt_descriptor"},{"location":"api/#read_gatt_characteristic","text":"| @requires_client | async read_gatt_characteristic(gatt_char: str) -> bytearray Read Generic Attribute Profile GATT characteristic data. Arguments : gatt_char : Specify a characteristic UUID string","title":"read_gatt_characteristic"},{"location":"api/#get_services","text":"| @requires_client | async get_services() -> Dict Get available services, descriptors and characteristics for the device.","title":"get_services"},{"location":"api/#get_sensor_values","text":"| @requires_client | async get_sensor_values() -> Optional[DeviceSensors] Get sensor values from the specified Wave device.","title":"get_sensor_values"},{"location":"api/#parse_manufacturer_data","text":"| @staticmethod | parse_manufacturer_data(manufacturer_data: Dict[int, int]) -> Optional[str] Converts manufacturer data and returns a serial number for the Airthings Wave devices. Arguments : manufacturer_data : The device manufacturer data","title":"parse_manufacturer_data"},{"location":"api/#create","text":"| @classmethod | create(cls, address: str, serial: str) Create a WaveDevice instance with arguments. Arguments : address : The device UUID in MacOS, or MAC in Linux and Windows. serial : The serial number for the device.","title":"create"},{"location":"api/#discover_devices","text":"async discover_devices(wave_devices: Optional[List[WaveDevice]] = None) -> List[WaveDevice] Discovers all valid, accessible Airthings Wave devices.","title":"discover_devices"},{"location":"api/#scan","text":"scan(max_retries: int = 3) -> List[WaveDevice] Convenience function for discovering devices. This is particularly useful for users that are not as comfortable asynchronous programming. Arguments : max_retries : Number of attempts for connecting to devices","title":"scan"},{"location":"specs/","text":"Device Specifications While Airthings has been kind enough to provide sample code for interfacing with their Wave family of devices, most of the technical details have to be inferred from the code or discovered via experimentation. This is an unofficial attempt to document those specifications, in hopes that they may be useful to other projects. Models Model Product Name Serial Sensors 2900 Wave 2900xxxxxx radon, temperature, humidity 2920 Wave Mini 2920xxxxxx temperature, humidity, TVOCs, CO 2 2930 Wave Plus 2930xxxxxx radon, temperature, humidity, TVOCs, CO 2 2950 Wave (2nd gen) 2950xxxxxx radon, temperature, humidity 2940 Wave Mist 2940xxxxxx ? 2810 Wave Hub 2810xxxxxx ? 2820 Wave Hub 2820xxxxxx ? Bluetooth Low Energy (BLE) BLE Advertisement A standard BLE advertisement contains 4 attributes: name , address , rssi , and metadata . BLE Advertisement - Name The name attribute may be populated with an Airthings name based on the model. Model BLE Advertised Name 2900 Airthings Wave (not verified) 2920 Airthings Wave Mini (not verified) 2930 Airthings Wave+ 2940 Airthings Wave Mist (not verified) 2950 Airthings Wave2 Advertisements are not guaranteed to be populated with this descriptive name, possibly appearing as a variant of the MAC address (e.g. 12-34-56-78-90-AD ). BLE Advertisement - Metadata The standard BLE metadata attribute consists of two sub-attributes: A uuids attribute contains the BLE service UUIDs avaialble on the device. For the Airthings Wave family, this UUID has been seen to be: b42e4a8e-ade7-11e4-89d3-123b93f75cba (read from a Wave2) Whether or not this servce UUID varies by device has not been verified. The manufacturer_data attribute contains vendor-specific device data, indexed by company ID . For Airthings devices, this ID is always: 820 / 0x0334 This ID is registered to Corentium AS . The manufacturer data under this ID contains the device serial number. See Data Formats BLE Services Wave+ Service UUID Description Notes 00001801-0000-1000-8000-00805f9b34fb Generic Attribute Profile 0000180a-0000-1000-8000-00805f9b34fb Device Information f000ffc0-0451-4000-b000-000000000000 TI Over-the-Air Download Service Likely Firmware Related b42e1c08-ade7-11e4-89d3-123b93f75cba Unknown (Airthings) Wave+ Wave2 Service UUID Description Notes 00001801-0000-1000-8000-00805f9b34fb Generic Attribute Profile 0000180a-0000-1000-8000-00805f9b34fb Device Information f000ffc0-0451-4000-b000-000000000000 TI Over-the-Air Download Service Likely Firmware Related b42e4a8e-ade7-11e4-89d3-123b93f75cba Airthings Wave2 BLE Characteristics Device Information Service The characteristic UUIDs seem to be consistent on Wave2 and Wave+ devices. Characteristic UUID Actions Name Value / Example 00002a29-0000-1000-8000-00805f9b34fb read Manufactuer Name String \"Airthings AS\" 00002a27-0000-1000-8000-00805f9b34fb read Harwdare Revision String (e.g. \"REV A\") 00002a26-0000-1000-8000-00805f9b34fb read Firmware Revision String (e.g. \"G-BLE-1.4.5-beta+0\") 00002a25-0000-1000-8000-00805f9b34fb read Serial Number String (e.g. \"029677\") 00002a24-0000-1000-8000-00805f9b34fb read Model Number String (e.g. \"2950\") 00002a23-0000-1000-8000-00805f9b34fb read System ID (e.g. E4 61 00 00 Ed 04 18 ) When combined, the Model Number String and Serial Number String appear to match the information provided in the BLE metadata manufacturer_data , as well as the serial printed on the physical device. Airthings Service Wave+ Characteristic UUID Actions Description b42e2fc2-ade7-11e4-89d3-123b93f75cba notify b42e2d06-ade7-11e4-89d3-123b93f75cba write-without-reponse, write, indicate b42e2a68-ade7-11e4-89d3-123b93f75cba read Wave+ current readings Wave2 Characteristic UUID Actions Description b42e538a-ade7-11e4-89d3-123b93f75cba notify b42e50d8-ade7-11e4-89d3-123b93f75cba write, notify b42e4dcc-ade7-11e4-89d3-123b93f75cba read Wave2 current readings TI Over-the-Air Download Service Wave+ Characteristic UUID Actions Description f000ffc5-0451-4000-b000-000000000000 write-without-response, notify ? f000ffc2-0451-4000-b000-000000000000 write-without-response, write, notify ? f000ffc1-0451-4000-b000-000000000000 write-without-response, write, notify ? Wave2 Characteristic UUID Actions Description f000ffc5-0451-4000-b000-000000000000 write, notify ? f000ffc2-0451-4000-b000-000000000000 write, notify ? f000ffc1-0451-4000-b000-000000000000 write, notify ? Data Format All binary data appears to be little-endian. BLE Manufacturer Data The BLE advertisement's manufacturer data for Airthings devices (id: 820) encodes the device serial number, which itself embeds the device model. manufacturer_data(820) (6 bytes, e.g. 0x6DE1D5AF0900 ) Byte Name Type Value / Example Notes 0-3 serial uint32 e.g. 0x6DE1D5AF decimal: 2950029677 --> model 2950 (Wave2) 4-5 -- -- 0x0900 unknown, may vary Sensor Values Wave+ Reading BLE characteristic b42e4dcc-ade7-11e4-89d3-123b93f75cba returns a 20 byte value representing the current sensor values. 00000000: 3031 2034 3120 3030 2030 3020 3838 2030 01 41 00 00 88 0 00000010: 3020 3866 2030 3020 3066 2030 3820 3538 0 8f 00 0f 08 58 00000020: 2062 6620 6234 2030 3220 3732 2030 3020 bf b4 02 72 00 00000030: 3030 2030 3020 3163 2030 360a 00 00 1c 06. Wave2 Reading BLE characteristic b42e4dcc-ade7-11e4-89d3-123b93f75cba returns a 20 byte value representing the current sensor values. Byte Name Type Notes 0 version uint8 sensor version, always 0x01 1 humidity uint8 relative humidty = value/2 (percent) 2-3 -- -- unknown, varies 4-5 radon_sta uint16 radon short-term average (Bq/m 3 ) 6-7 radon_lta uint16 radon long-term average (Bq/m 3 ) 8-9 temperature uint16 temp = val/100 (celsius) 10-19 -- -- unknown, always 0xFFFFFFFFFFFF0000FFFF 00000000: 3031 2033 3520 3164 2030 3020 3238 2030 01 35 1d 00 28 0 00000010: 3020 3341 2030 3020 6132 2030 3720 6666 0 3A 00 a2 07 ff 00000020: 2066 6620 6666 2066 6620 6666 2066 6620 ff ff ff ff ff 00000030: 3030 2030 3020 6666 2066 660a 00 00 ff ff.","title":"Device Specifications"},{"location":"specs/#device-specifications","text":"While Airthings has been kind enough to provide sample code for interfacing with their Wave family of devices, most of the technical details have to be inferred from the code or discovered via experimentation. This is an unofficial attempt to document those specifications, in hopes that they may be useful to other projects.","title":"Device Specifications"},{"location":"specs/#models","text":"Model Product Name Serial Sensors 2900 Wave 2900xxxxxx radon, temperature, humidity 2920 Wave Mini 2920xxxxxx temperature, humidity, TVOCs, CO 2 2930 Wave Plus 2930xxxxxx radon, temperature, humidity, TVOCs, CO 2 2950 Wave (2nd gen) 2950xxxxxx radon, temperature, humidity 2940 Wave Mist 2940xxxxxx ? 2810 Wave Hub 2810xxxxxx ? 2820 Wave Hub 2820xxxxxx ?","title":"Models"},{"location":"specs/#bluetooth-low-energy-ble","text":"","title":"Bluetooth Low Energy (BLE)"},{"location":"specs/#ble-advertisement","text":"A standard BLE advertisement contains 4 attributes: name , address , rssi , and metadata .","title":"BLE Advertisement"},{"location":"specs/#ble-advertisement-name","text":"The name attribute may be populated with an Airthings name based on the model. Model BLE Advertised Name 2900 Airthings Wave (not verified) 2920 Airthings Wave Mini (not verified) 2930 Airthings Wave+ 2940 Airthings Wave Mist (not verified) 2950 Airthings Wave2 Advertisements are not guaranteed to be populated with this descriptive name, possibly appearing as a variant of the MAC address (e.g. 12-34-56-78-90-AD ).","title":"BLE Advertisement - Name"},{"location":"specs/#ble-advertisement-metadata","text":"The standard BLE metadata attribute consists of two sub-attributes: A uuids attribute contains the BLE service UUIDs avaialble on the device. For the Airthings Wave family, this UUID has been seen to be: b42e4a8e-ade7-11e4-89d3-123b93f75cba (read from a Wave2) Whether or not this servce UUID varies by device has not been verified. The manufacturer_data attribute contains vendor-specific device data, indexed by company ID . For Airthings devices, this ID is always: 820 / 0x0334 This ID is registered to Corentium AS . The manufacturer data under this ID contains the device serial number. See Data Formats","title":"BLE Advertisement - Metadata"},{"location":"specs/#ble-services","text":"Wave+ Service UUID Description Notes 00001801-0000-1000-8000-00805f9b34fb Generic Attribute Profile 0000180a-0000-1000-8000-00805f9b34fb Device Information f000ffc0-0451-4000-b000-000000000000 TI Over-the-Air Download Service Likely Firmware Related b42e1c08-ade7-11e4-89d3-123b93f75cba Unknown (Airthings) Wave+ Wave2 Service UUID Description Notes 00001801-0000-1000-8000-00805f9b34fb Generic Attribute Profile 0000180a-0000-1000-8000-00805f9b34fb Device Information f000ffc0-0451-4000-b000-000000000000 TI Over-the-Air Download Service Likely Firmware Related b42e4a8e-ade7-11e4-89d3-123b93f75cba Airthings Wave2","title":"BLE Services"},{"location":"specs/#ble-characteristics","text":"","title":"BLE Characteristics"},{"location":"specs/#device-information-service","text":"The characteristic UUIDs seem to be consistent on Wave2 and Wave+ devices. Characteristic UUID Actions Name Value / Example 00002a29-0000-1000-8000-00805f9b34fb read Manufactuer Name String \"Airthings AS\" 00002a27-0000-1000-8000-00805f9b34fb read Harwdare Revision String (e.g. \"REV A\") 00002a26-0000-1000-8000-00805f9b34fb read Firmware Revision String (e.g. \"G-BLE-1.4.5-beta+0\") 00002a25-0000-1000-8000-00805f9b34fb read Serial Number String (e.g. \"029677\") 00002a24-0000-1000-8000-00805f9b34fb read Model Number String (e.g. \"2950\") 00002a23-0000-1000-8000-00805f9b34fb read System ID (e.g. E4 61 00 00 Ed 04 18 ) When combined, the Model Number String and Serial Number String appear to match the information provided in the BLE metadata manufacturer_data , as well as the serial printed on the physical device.","title":"Device Information Service"},{"location":"specs/#airthings-service","text":"Wave+ Characteristic UUID Actions Description b42e2fc2-ade7-11e4-89d3-123b93f75cba notify b42e2d06-ade7-11e4-89d3-123b93f75cba write-without-reponse, write, indicate b42e2a68-ade7-11e4-89d3-123b93f75cba read Wave+ current readings Wave2 Characteristic UUID Actions Description b42e538a-ade7-11e4-89d3-123b93f75cba notify b42e50d8-ade7-11e4-89d3-123b93f75cba write, notify b42e4dcc-ade7-11e4-89d3-123b93f75cba read Wave2 current readings","title":"Airthings Service"},{"location":"specs/#ti-over-the-air-download-service","text":"Wave+ Characteristic UUID Actions Description f000ffc5-0451-4000-b000-000000000000 write-without-response, notify ? f000ffc2-0451-4000-b000-000000000000 write-without-response, write, notify ? f000ffc1-0451-4000-b000-000000000000 write-without-response, write, notify ? Wave2 Characteristic UUID Actions Description f000ffc5-0451-4000-b000-000000000000 write, notify ? f000ffc2-0451-4000-b000-000000000000 write, notify ? f000ffc1-0451-4000-b000-000000000000 write, notify ?","title":"TI Over-the-Air Download Service"},{"location":"specs/#data-format","text":"All binary data appears to be little-endian.","title":"Data Format"},{"location":"specs/#ble-manufacturer-data","text":"The BLE advertisement's manufacturer data for Airthings devices (id: 820) encodes the device serial number, which itself embeds the device model. manufacturer_data(820) (6 bytes, e.g. 0x6DE1D5AF0900 ) Byte Name Type Value / Example Notes 0-3 serial uint32 e.g. 0x6DE1D5AF decimal: 2950029677 --> model 2950 (Wave2) 4-5 -- -- 0x0900 unknown, may vary","title":"BLE Manufacturer Data"},{"location":"specs/#sensor-values","text":"Wave+ Reading BLE characteristic b42e4dcc-ade7-11e4-89d3-123b93f75cba returns a 20 byte value representing the current sensor values. 00000000: 3031 2034 3120 3030 2030 3020 3838 2030 01 41 00 00 88 0 00000010: 3020 3866 2030 3020 3066 2030 3820 3538 0 8f 00 0f 08 58 00000020: 2062 6620 6234 2030 3220 3732 2030 3020 bf b4 02 72 00 00000030: 3030 2030 3020 3163 2030 360a 00 00 1c 06. Wave2 Reading BLE characteristic b42e4dcc-ade7-11e4-89d3-123b93f75cba returns a 20 byte value representing the current sensor values. Byte Name Type Notes 0 version uint8 sensor version, always 0x01 1 humidity uint8 relative humidty = value/2 (percent) 2-3 -- -- unknown, varies 4-5 radon_sta uint16 radon short-term average (Bq/m 3 ) 6-7 radon_lta uint16 radon long-term average (Bq/m 3 ) 8-9 temperature uint16 temp = val/100 (celsius) 10-19 -- -- unknown, always 0xFFFFFFFFFFFF0000FFFF 00000000: 3031 2033 3520 3164 2030 3020 3238 2030 01 35 1d 00 28 0 00000010: 3020 3341 2030 3020 6132 2030 3720 6666 0 3A 00 a2 07 ff 00000020: 2066 6620 6666 2066 6620 6666 2066 6620 ff ff ff ff ff 00000030: 3030 2030 3020 6666 2066 660a 00 00 ff ff.","title":"Sensor Values"},{"location":"web/","text":"Airthings Web API Client This library also provides a client for accessing the Airthings web API. The code in wave_reader/web is mostly generated by openapi-python-client using the official OpenAPI schema published by Airthings . As with any versioned schema, breaking changes are possible by upstream developments. If you notice anything that isn't working correctly, please open a bug ticket. Check out the official specification to see what functionality is available . Usage First, create a client: from wave_reader.web import client handler = client.OAuth2ClientHandler(client_id, client_secret, redirect_uri) handler.new_authorization_url() handler.new_access_token() client = handler.new_client() Now call your endpoint and use the models: from wave_reader.web.models.get_device_detailed_response import GetDeviceDetailedResponse from wave_reader.web.api.devices import device_info from wave_reader.web.types import Response response: Response[GetDeviceDetailedResponse] = device_info.sync_detailed(1234567890, client=client) Or do the same thing with an async version: from wave_reader.web.models.get_device_detailed_response import GetDeviceDetailedResponse from wave_reader.web.api.devices import device_info from wave_reader.web.types import Response response: Response[GetDeviceDetailedResponse] = await device_info.asyncio_detailed(1234567890, client=client) All path/query params, and bodies become method arguments. In the example above, the serial number is required. Important Notes Every path/method combo becomes a Python module with four functions: sync : Blocking request that returns parsed data (if successful) or None sync_detailed : Blocking request that always returns a Request , optionally with parsed set if the request was successful. asyncio : Like sync but the async instead of blocking asyncio_detailed : Like sync_detailed by async instead of blocking All path/query params, and bodies become method arguments. If your endpoint had any tags on it, the first tag will be used as a module name for the function (my_tag above) Any endpoint which did not have a tag will be in wave_reader.web.api.default Testing The code in api and models is auto-generated and won't be covered in testing. Bugs that may occur in the future will likely result from upstream API schema changes and that is out of our control.","title":"Web Client"},{"location":"web/#airthings-web-api-client","text":"This library also provides a client for accessing the Airthings web API. The code in wave_reader/web is mostly generated by openapi-python-client using the official OpenAPI schema published by Airthings . As with any versioned schema, breaking changes are possible by upstream developments. If you notice anything that isn't working correctly, please open a bug ticket. Check out the official specification to see what functionality is available .","title":"Airthings Web API Client"},{"location":"web/#usage","text":"First, create a client: from wave_reader.web import client handler = client.OAuth2ClientHandler(client_id, client_secret, redirect_uri) handler.new_authorization_url() handler.new_access_token() client = handler.new_client() Now call your endpoint and use the models: from wave_reader.web.models.get_device_detailed_response import GetDeviceDetailedResponse from wave_reader.web.api.devices import device_info from wave_reader.web.types import Response response: Response[GetDeviceDetailedResponse] = device_info.sync_detailed(1234567890, client=client) Or do the same thing with an async version: from wave_reader.web.models.get_device_detailed_response import GetDeviceDetailedResponse from wave_reader.web.api.devices import device_info from wave_reader.web.types import Response response: Response[GetDeviceDetailedResponse] = await device_info.asyncio_detailed(1234567890, client=client) All path/query params, and bodies become method arguments. In the example above, the serial number is required.","title":"Usage"},{"location":"web/#important-notes","text":"Every path/method combo becomes a Python module with four functions: sync : Blocking request that returns parsed data (if successful) or None sync_detailed : Blocking request that always returns a Request , optionally with parsed set if the request was successful. asyncio : Like sync but the async instead of blocking asyncio_detailed : Like sync_detailed by async instead of blocking All path/query params, and bodies become method arguments. If your endpoint had any tags on it, the first tag will be used as a module name for the function (my_tag above) Any endpoint which did not have a tag will be in wave_reader.web.api.default","title":"Important Notes"},{"location":"web/#testing","text":"The code in api and models is auto-generated and won't be covered in testing. Bugs that may occur in the future will likely result from upstream API schema changes and that is out of our control.","title":"Testing"}]}